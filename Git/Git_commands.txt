# Setup and Configuration
1) git config --global user.name "Your Name"
Set your name for commits.

2)git config --global user.email "you@example.com"
Set your email for commits.

3)Verify Configuration:
git config --list

4)Set Up Default Text Editor Nano
git config --global core.editor "nano"

5)Set Up Default Text Editor VS Code
git config --global core.editor "code --wait"

--------------------------------------------------------------------------------------------------------------------------------
# Initialize and Clone Repositories
git init
Initialize a new Git repository.

git clone <repository_url>
Clone an existing repository from a URL.

---------------------------------------------------------------------------------------------------------------------------------

# Basic Operations
git status
Show the current state of the working directory and staging area.

git add <file>
Stage a specific file for commit.

git add .
Stage all changes in the directory for commit.

git commit -m "Commit message"
Commit the staged changes with a message.

**git commit -am "Commit message"
Add and commit changes in one command (for tracked files).

git revert <commit_hash>
Undo changes introduced by a specific commit

**git revert HEAD
Undo changes introduced by a last commit

---------------------------------------------------------------------------------------------------------------------------------------
# Branching, Merging, Delete branch

1) List all local branches.
git branch

2) List all remote branches.
git branch -r

3) Create a new branch.
git branch <branch_name>

4) Switch to a specific branch.
git checkout <branch_name>

5) Create and switch to a new branch.
git checkout -b <branch_name>

6) Merge the specified branch into the current branch.
git merge <branch_name>

7) To add branch in the remote repo/ do it before push the change to remote repo.
git push --set-upstream origin <branch_name>

8)Delete a Local Branch
git branch -d <branch_name>

8)Force Delete a local Branch
git branch -D <branch_name>

9)Delete a Remote Branch
git push origin --delete <branch_name>

10)Fetch and Prune Locale Stale Branches
git fetch --prune

11)Fetch and Prune Specific Remote Branches
git fetch --prune <remote_name>
git fetch --prune origin



------------------------------------------------------------------------------------------------------------------------------------------
# Pull Push & Remote Operations
1) Push your commits to the remote repository.
git push

2) Push a specific branch to the remote repository. 
git push origin <branch_name>

3) Fetch and merge changes from the remote repository.
git pull

4) Push local repo to remote repository.
git push origin <git url>

5) git push <repo name only> <branch name>
To push repo change to a particular branch

6) View remote repo location/version/URLS. 
git remote -v

7) Add a remote repository. 
git remote add origin <repository_url>

8) Update the Remote URL
git remote set-url origin https://github.com/SourabhBiswasin/devops.git

9)Force Push
git push --force

------------------------------------------------------------------------------------------------------------------------------------------
#Undo Changes

1) Undo Changes
git reset <file>
Unstage a file.

2) git reset --soft HEAD~1
Undo the last commit but keep changes staged.

3 git reset --hard HEAD~1
Undo the last commit and discard all changes.

-------------------------------------------------------------------------------------------------------------------------------------------
#History & Stashing

1) Viewing History
git log
View commit history.

2) git log --oneline
View a simplified commit history.

3) Stashing
git stash
Temporarily save changes without committing.

4) Reapply stashed changes 
git stash apply

---------------------------------------------------------------------------------------------------------------------------
#Remove and Move Files

1) Remove Files
git rm <file>
Remove a file from the repository and stage the removal.

2) Remove Tracked or Tracking files
git rm -r --cached <folder name or files name>
Remove a folder/file from the stage.

3) Remove folder Recursively( Delete everything in the folder including sub-folders and files)
git rm -r <folder name>

4) Remove folder Recursively/Forcefully
git rm -rf <folder name>
 
5) Rename old_file.txt to new_file.txt:
git mv old_file.txt new_file.txt

6) Move a File to a Directory(example.txt to the docs folder:}
git mv example.txt docs/

7) Rename or Move a Directory(old_folder to new_folder)
git mv old_folder new_folder

8) Move old_folder to new_folder
git mv old_folder new_folder

---------------------------------------------------------------------------------------------------------------------------------------------
