# Setup and Configuration
1) git config --global user.name "Your Name"
Set your name for commits.

2) git config --global user.email "you@example.com"
Set your email for commits.

3) Verify Configuration:
git config --list

4) Set Up Default Text Editor Nano
git config --global core.editor "nano"

5) Set Up Default Text Editor VS Code
git config --global core.editor "code --wait"

--------------------------------------------------------------------------------------------------------------------------------
# Initialize and Clone Repositories
1) git init
Initialize a new Git repository.

2) git clone <repository_url>
Clone an existing repository from a URL.

---------------------------------------------------------------------------------------------------------------------------------

# Basic Operations
1) git status
Show the current state of the working directory and staging area.

2) git add <file>
Stage a specific file for commit.

3) git add .
Stage all changes in the directory for commit.

4) git stash 
Temporarily save your changes. Use When code or feature is not completed but need to save changes of half done work

5) git stash list
List saved changes during git stash command 

6) git stash pop
Applies the stashed changes and removes them from the stash list.

7) git stash apply	
Applies the stashed changes but does not remove them from the stash list.

8) git commit -m "Commit message"
Commit the staged changes with a message.

9) git commit -am "Commit message"
Add and commit changes in one command (for tracked files).

10) git revert <commit_hash>
Undo changes introduced by a specific commit

11) git revert HEAD
Undo changes introduced by a last commit

12) git reword
Modify the commit message.

---------------------------------------------------------------------------------------------------------------------------------------
# Branching, Merging, Delete branch

1) List all local branches.
git branch

2) List all remote branches.
git branch -r

3) Create a new branch.
git branch <branch_name>

4) Switch to a specific branch.
git checkout <branch_name>

5) Create and switch to a new branch.
git checkout -b <branch_name>

6) Merge the specified branch into the current branch.
git merge <branch_name>

7) To add branch in the remote repo/ do it before push the change to remote repo.
git push --set-upstream origin <branch_name>

8) Delete a Local Branch
git branch -d <branch_name>

8) Force Delete a local Branch
git branch -D <branch_name>

9) Delete a Remote Branch
git push origin --delete <branch_name>

10) Fetch and Prune Locale Stale Branches
git fetch --prune

11) Fetch and Prune Specific Remote Branches
git fetch --prune <remote_name>
git fetch --prune origin

12) **Git rebase command**
Common Use Cases for git rebase is updating a branch with changes from the main branch.

Example
git checkout feature-branch(Note: - Or the branch Name)
git rebase main
This rewrites the feature-branch commit history to include the latest commits from main.

git rebase -i HEAD~n (Note: - Replace n with the number of commits you want to interactively rebase) 
Open Interactive Rebase (Use interactive mode to edit, squash, or reorder commits)

Note:-
pick: Keep the commit as-is.
squash: Combine this commit with the previous one.
reword: Modify the commit message.
edit: Pause the rebase process to amend this commit.

git rebase --onto <branch-name-you want to add commit from another branch> <Name of the commit/commit ID you want to skip> <branch-name you want to copy the commit from>

Example
main:       A --- B --- C --- D --- E
feature:                        C --- D --- E
You want to move commits D and E from feature onto the main branch, skipping commit C.
git checkout feature
git rebase --onto main C feature

git rebase --continue
Continue the rebase process

git rebase --abort
If you want to cancel the rebase

------------------------------------------------------------------------------------------------------------------------------------------
# Pull Push & Remote Operations
1) Push your commits to the remote repository.
git push

2) Push a specific branch to the remote repository. 
git push origin <branch_name>

3) Fetch and merge changes from the remote repository.
git pull <write_origin> <branch_name>

4) Push local repo to remote repository.
git push origin <git url>

5) git push <repo name only> <branch name>
To push repo change to a particular branch

6) View remote repo location/version/URLS. 
git remote -v

7) Add a remote repository. 
git remote add origin <repository_url>

8) Update the Remote URL
git remote set-url origin https://github.com/SourabhBiswasin/devops.git

9)Force Push
git push --force

10) Allow Merging of Unrelated Histories (Trouble shoot step)
git pull origin main --allow-unrelated-histories


------------------------------------------------------------------------------------------------------------------------------------------
#Undo Changes OR Rename commit messages

1) Undo Changes
git reset <file>
Unstage a file.

2) git reset --soft HEAD~1
Undo the last commit but keep changes staged.

3) git reset --hard HEAD~1 or git reset --hard
Undo the last commit and discard all changes. After "~" sign we will be directed git will consider the head below to mentioned number. 

4) git revert <commit ID name>
Create a new commit that undoes the changes made by a mentioned commit ID. It is a safe operation compare to git reset.

5) git revert <commit ID name> --hard
Hard revert the mentioned commit ID and delete the files as well from the branch permanentely.

4) git commit --amend -m "New commit message"
Rename the last commit message

5) git commit --amend
modifies the most recent commit in Git by combining staged changes with it

6) #Steps to Reword/rewrite an Older Commit
git rebase -i HEAD~n

Note: - Replace "n" with the number of commits you want to see and edit. 

Example: - 
git rebase -i HEAD~3

Example Output
pick abc123 Commit message 1
pick def456 Commit message 2
pick ghi789 Commit message 3

Change the word pick to reword (or r) for the commit you want to edit:
pick abc123 Commit message 1
reword def456 Commit message 2
pick ghi789 Commit message 3

Modify the Commit Message:

Git will open an editor where you can edit the commit message. Save and close the editor when done.
Git will then apply the changes and rewrite the history.


-------------------------------------------------------------------------------------------------------------------------------------------
#History & Stashing

1) Viewing History
git log
View commit history.

2) git log --oneline
View a simplified commit history.

3) Stashing
git stash
Temporarily save changes without committing.

4) Reapply stashed changes 
git stash apply

---------------------------------------------------------------------------------------------------------------------------
#Remove and Move Files

1) Remove Files
git rm <file>
Remove a file from the repository and stage the removal.

2) Remove Tracked or Tracking files
git rm -r --cached <folder name or files name>
Remove a folder/file from the stage.

3) Remove folder Recursively( Delete everything in the folder including sub-folders and files)
git rm -r <folder name>

4) Remove folder Recursively/Forcefully
git rm -rf <folder name>
 
5) Rename old_file.txt to new_file.txt:
git mv old_file.txt new_file.txt

6) Move a File to a Directory(example.txt to the docs folder:}
git mv example.txt docs/

7) Rename or Move a Directory(old_folder to new_folder)
git mv old_folder new_folder

8) Move old_folder to new_folder
git mv old_folder new_folder

---------------------------------------------------------------------------------------------------------------------------------------------
